<template>
	<view class="page">
	<list  class="scroll-container">
		<cell>
		<view class="top-wraper" :style="{backgroundImage: `linear-gradient(to bottom, ${get_color}, #121212)`}">
			<view :style="{ height: statusbar_height + 'px'}" >
				<!-- 这里是状态栏-->
			</view>
			<view class="greeting-words-container">
				<text class="greeting-words"> {{get_greeting}} </text>
			</view>
			
			<view class="button-wrapper">
				<view class="icon-area config" @tap="get_radar_list">
					<wyy-icon type="&#xe632;" size="45" color="#FFFFFF"></wyy-icon>
				</view>
				<view class="icon-area recent" >
					<wyy-icon type="&#xe61c;" size="45" color="#FFFFFF"></wyy-icon>
				</view>
				<view class="icon-area config" >
					<wyy-icon type="&#xe68b;" size="45" color="#FFFFFF"></wyy-icon>
				</view>
			</view>
		</view>
		
		<view v-if="is_login">
			<view class="item-title-bar">
				<text class="title-text"
				@appear="onappear_recommend_songs(recommend_songs_title)">{{recommend_songs_title}}</text>
			</view>
			<slide-bar :list="recommend_songs" :model="'tiny'" :type="'song'"></slide-bar>
		</view>
		
		<view class="item-title-bar" >
			<text class="title-text" 
			@appear="onappear_recommend_list(recommend_playlist_title)">{{recommend_playlist_title}}</text>
		</view>
		<slide-bar :list="recommend_playlist" :model="'large'" :type="'playlist'"></slide-bar>
		
		<view class="item-title-bar">
			<text class="title-text">{{fm_list_title}}</text>
		</view>
		<slide-bar :list="fm_list" :model="'tiny'" :type="'song'"></slide-bar>

		<view class="item-title-bar">
			<text class="title-text"
			@appear="onappear_new_songs(new_songs_title)">{{new_songs_title}}</text>
		</view>
		<slide-bar :list="new_songs" :model="'tiny'" :type="'song'"></slide-bar>
		
		<view class="item-title-bar">
			<text class="title-text"
			@appear="onappear_radar_list(radar_list_title)">{{radar_list_title}}</text>
		</view>
		<slide-bar :list="radar_list" :model="'large'" :type="'playlist'"></slide-bar>

		<view class="item-title-bar">
			<text class="title-text">{{top_albums_title}}</text>
		</view>
		<slide-bar :list="top_albums" :model="'large'" :type="'album'"></slide-bar>
		
		<!-- <view class="item-title-bar">
			<text class="title-text">最近播放</text>
		</view>
		<slide-bar :list="playlist_data"></slide-bar> -->
		</cell>
	</list>
		
		<wyy-play v-if="played"></wyy-play>
		<BottomBar></BottomBar>
	</view>
	
</template>

<script>
	import slideBar from '@/components/slide-bar/slide_bar.nvue';
	import playlistCard from '../../components/playlist_card.nvue';
	import BottomBar from '@/components/BottomBar.nvue'
	import wyyPlay from '@/components/wyy-play/wyy_play.nvue';
	import $repeater from '@/utils/repeater.js';
	const modal = weex.requireModule('modal');
	export default {
		components: {
			slideBar,
			BottomBar,
			wyyPlay,
			playlistCard
		},
		data() {
			return {
				show_play: false,
				show_sidebar: false,
				recommend_playlist_title: '推荐歌单',
				recommend_songs_title: '每日推荐',
				new_songs_title: '新歌速递',
				top_albums_title: '热门专辑',
				radar_list_title: '您的雷达歌单',
				fm_list_title: '私人FM',
				
				recommend_playlist: [],
				recommend_songs: [],
				radar_list:[],
				new_songs: [],
				top_albums: [],
				fm_list: [],
				
				threads: [],
				is_login: true,
				tab_index: 0,
				tabBars: [
					{name: '我的', id: 'mine'},
					{name: '发现', id: 'find'},
					{name: '朋友', id: 'friends'},
					{name: '视频', id: 'video'},
				],
				
			}
		},
		computed: {
			
			played: function() {
				return this.$store.state.played;
			},
			statusbar_height() {
				return $repeater.config.status_bar_height
			},
			get_color() {
				var myDate = new Date();
				var hour = myDate.getHours();
				if (5 < hour && hour <= 9) return '#ee6060';
				else if (9 < hour && hour <= 11) return '#6199d2';
				else if (11 < hour && hour <= 13) return '#f3e395';
				else if (13 < hour && hour <= 17) return '#eea16d';
				else if (17 < hour && hour <= 24) return '#1f3972';
				else if (0 <= hour && hour <= 5) return '#7344ba';
			},
			get_greeting() {
				var myDate = new Date();
				var hour = myDate.getHours();
				if (5 < hour && hour <= 9) return '早上好';
				else if (9 < hour && hour <= 11) return '早上好';
				else if (11 < hour && hour <= 13) return '中午好';
				else if (13 < hour && hour <= 17) return '下午好';
				else if (17 < hour && hour <= 24) return '晚上好';
				else if (0 <= hour && hour <= 5) return '晚上好';
			},
			
		},
		watch: {
			tab_index: function(val, old_val) {
				
			}
		},
		onBackPress() {
			$repeater.helper.backgrounder();
		},
		created() {
			setTimeout(()=>{
				this.check_login();	
			}, 1000);
			this.get_fm_list();
			this.get_top_albums();
		},
		onShow() {
			
		},
		onUnload() {
			
		},
		methods: {
			check_login() {
				if (this.$store.state.uid != '')
				{
					this.is_login = true;
				} else {
					this.is_login = false;
				}
			},
			is_item_in_list(list, item) {
				let counter = 0;
				for (var i = 0; i < list.length - 1; i ++) {
					if (list[i] == item){
						return true;
					}
					counter ++;
					if (counter == list.length - 1) {
						return false;		
					}
				}
				
			},
			remove_item_in_list(list, item) {
				for ( var i = 0; i < list.length - 1; i ++) { 
				   if ( list[i] === item) {
				     list.splice(i, 1); 
				   }
				}
			},
			onappear_recommend_list(char) {
				if (this.recommend_playlist.length == 0 && 
					!this.is_item_in_list(this.threads, 'recommend_list')) {
						this.threads.push('recommend_list');
						this.get_recommend_playlists();
					}
			},
			onappear_new_songs(char) {
				if (this.new_songs.length == 0 && 
					!this.is_item_in_list(this.threads,'new_songs')) {
						this.threads.push('new_songs');
						this.get_new_songs();
					}
					
			},
			onappear_recommend_songs(char) {
				if (this.recommend_songs.length == 0 &&
					!this.is_item_in_list(this.threads, 'recommend_songs')) {
						this.threads.push('recommend_songs')
						this.get_recommend_songs();
					}
			},
			onappear_radar_list(char) {
				if (this.radar_list.length == 0 &&
					!this.is_item_in_list(this.threads, 'radar_list')) {
						this.threads.push('radar_list')
						this.get_radar_list();
					}
			},
			get_recommend_songs() {
				$repeater.recommend.songs((data)=> {
					let new_songs = data.data.dailySongs;
					let format_songs = []
					new_songs.forEach((item)=> {
						let format_song = {}
						format_song.id = item.id;
						format_song.name = item.name;
						format_song.artists = item.ar;
						format_song.picUrl = item.al.picUrl;
						format_songs.push(format_song);
					})
					this.recommend_songs = format_songs;
					this.remove_item_in_list(this.threads, 'recommend_songs')
					console.log('get recommend_songs')
				})
			},
			get_recommend_playlists() {
				$repeater.personalized.playlist((res)=> {
					let format_lists = []
					res.result.forEach((playList)=>{
						let format_list = {}
						format_list.id = playList.id;
						format_list.name = playList.name;
						format_list.coverImgUrl = playList.picUrl;
						format_lists.push(format_list)
					})
					
					this.recommend_playlist = format_lists;
					this.remove_item_in_list(this.threads, 'recommend_playlist')
					console.log('get recommend_playlist')
				}, 6)
			},
			get_radar_list() {
				$repeater.recommend.playlist((data)=> {
					let radar_list = data.recommend
					let format_lists = [];
					radar_list.forEach((item)=>{
						let format_list = {}
						format_list.id = item.id;
						format_list.name = item.name;
						format_list.coverImgUrl = item.picUrl;
						format_lists.push(format_list);
					})
					this.radar_list = format_lists;
					this.remove_item_in_list(this.threads, 'radar_list')
					console.log('get radar_list')
				});
			},
			get_fm_list() {
				$repeater.recommend.FM((data)=> {
					let fm_list = data.data;
					let format_songs = [];
					fm_list.forEach((item)=>{
						let format_song = {};
						format_song.id = item.id;
						format_song.name = item.name;
						format_song.artists = item.artists;
						format_song.picUrl = item.album.blurPicUrl;
						format_songs.push(format_song);
					})
					this.fm_list = format_songs;
				});
			},
			get_new_songs() {
				$repeater.search.get_new_songs((data)=> {
					let new_songs = data.data;
					let format_songs = []
					new_songs = new_songs.slice(0, 30);
					new_songs.forEach((item)=> {
						let format_song = {}
						format_song.id = item.id;
						format_song.name = item.name;
						format_song.artists = item.artists
						format_song.picUrl = item.album.blurPicUrl;
						format_songs.push(format_song);
					})
					this.new_songs = format_songs;
					this.remove_item_in_list(this.threads, 'new_songs')
					console.log('get new_songs')
				});
			},
			get_top_albums() {
				$repeater.search.get_top_albums((data)=>{
					let albums = data.monthData;
					if (albums.length >= 30 )
						albums = albums.slice(0, 30);
					let format_albums = []
					albums.forEach((album) => {
						let format_album = {}
						format_album.id = album.id;
						format_album.name = album.name;
						format_album.artists = album.artists;
						format_album.picUrl = album.blurPicUrl;
						format_albums.push(format_album)
					})
					this.top_albums = format_albums;
				})
			},
			ontabtap(index) {
				this.change_tab_index(index);
			},
			show_side_drawer() {
				this.show_sidebar = true;
			},
			close_side_drawer() {
				this.show_sidebar = false;
			},
			change_tab(e) {
				
				let index = e.target.current || e.detail.current;
				this.change_tab_index(index);
			},
			change_tab_index(index) {
				
				this.tab_index = index;
			}
		}
	}
</script>

<style>
	.scroll-container{
		flex: 1;
	}
	
	.page {
		flex: 1;
		flex-direction: column;
	}
	
	.top-wraper {
		height: 220rpx;
		flex-direction: row;
		align-items: center;
		padding-top: 75rpx;
	}
	
	.greeting-words-container {
		width: 300rpx;
		height: 110rpx;
		justify-content: center;
	}
	
	.greeting-words {
		color: #FFFFFF;
		font-size: 50rpx;
		font-weight: bold;
		padding-left: 30rpx;
	}
	
	.button-wrapper {
		width: 450rpx;
		height: 110rpx;
		flex-direction: row;
		justify-content: flex-end;
	}
	
	.icon-area {
		width: 70rpx;
		height: 110rpx;
		flex-direction: row;
		align-items: center;
		margin-right: 15rpx;
	}
	
	.item-title-bar{
		width: 750rpx;
		height: 100rpx;
		align-items: flex-start;
		padding-top: 25rpx;
		padding-left: 40rpx;
		background-color: #121212;
	}
	
	.title-text {
		font-size: 50rpx;
		font-weight: bold;
		color: #FFFFFF;
	}
	
	.x-scroller {
		height: 460rpx;;
		width: 100%;
		overflow: hidden;
		background-color: #c2c2c2;
		flex-direction: row;
	}
	
	.list-container {
		flex-direction: row;
	}
	
	.swiper-box {
		flex: 1;
	}

	.sub_page {
		flex-direction: row;
		justify-content: space-between;
		background-color: rgba(218, 203, 129, 1.0);
	}

	

	.scroll-h {
		background-color: rgba(218, 45, 30, 1);
		width: 550rpx;
		height: 80rpx;
		flex-direction: row;
		justify-content: center;
	}


	.uni-tab-item-title {
		color: #FFFFFF;
		font-size: 26rpx;
		height: 80rpx;
		line-height: 80rpx;
		flex-wrap: nowrap;
		/* #ifndef APP-PLUS */
		white-space: nowrap;
		/* #endif */
	}

	.uni-tab-item-title-active {
		color: #FFFFFF;
		font-weight: 600;
		font-size: 32rpx;
	}

	.tab-item {
		justify-content: center;
		align-items: center;
		margin: 0 10rpx;
		width: 100rpx;
	}

	.left-bar {
		width: 100rpx;
		height: 80rpx;
		justify-content: center;
		align-items: center;
	}

	.right-bar {
		width: 100rpx;
		height: 80rpx;
		justify-content: center;
		align-items: center;
	}

	.menu-icon {
		width: 35rpx;
		height: 35rpx;
	}
	.search-icon {
		width: 35rpx;
		height: 35rpx;
	}
</style>
