<template>
	<view class="page">
		
		<uni-transition :duration="300" :mode-class="mode_class" :styles="transfrom_class" :show="show_lyric">
			<list v-if="!nolyric" class="lyric-list" show-scrollbar="false" >
				<cell class="top-area"></cell>
				<cell @tap="change_container()" v-for="(row, index) in lyric" :key="index">
					<view v-if="row.content" class="lyric-row">
						<text :ref="`lyric${index}`" :class="active_lyric_row_index == row.index ? 'light-text' : ''" class="lyric-row-text">{{row.content}}</text>
					</view>
				</cell>
			</list>
			<view v-else style="flex: 1;justify-content: center;" @tap="change_container()">
				<text class="lyric-row-text">纯音乐, 请欣赏</text>
			</view>
		</uni-transition>
		<uni-transition :duration="300" :mode-class="mode_class" :styles="transfrom_class" :show="!show_lyric">
			<view class="container" @tap="change_container()">
				<view class="cover">
					<image ref="cover_image" class="cover-image" resize="cover" :src="played.cover_image + '?param=400y400'"></image>
				</view>
				<view class="option-area">
					<view class="icon-group">
						<view class="icon-area" @tap="like($event)">
							<wyy-icon :type="islike ? '&#xe679;' : '&#xe67a;'" size="40" :color="islike ? '#FF0000' : '#FFFFFF'" ></wyy-icon>
						</view>
						<view class="icon-area" @tap="download($event)">
							<wyy-icon type="&#xe666;" size="40" color="#FFFFFF" ></wyy-icon>
						</view>
						
						<view class="icon-area">
							<wyy-icon type="&#xe668;" size="40" color="#FFFFFF" ></wyy-icon>
						</view>
						<view class="icon-area">
							<wyy-icon type="&#xe67d;" size="40" color="#FFFFFF" ></wyy-icon>
						</view>
						
					</view>
				</view>
			</view>
		</uni-transition>
		
		
		<view class="footer">
			
			<view class="slider-view">
				<view class="current_time">
					<text class="time-text">{{position_show}}</text>
				</view>
				
				<slider @change="slider_change" @changing="slider_changing" class="slider" :min="0" :max="duration" :value="current_position" activeColor="rgba(255,255,255,.7)" backgroundColor="rgba(255,255,255,.4)" block-color="#FFFFFF" block-size="18" />
				
				<view class="end_time">
					<text class="time-text grey-time-text">{{duration_show}}</text>
				</view>
			</view>
			
			<view class="handle-area">
				<view class="icon-group">
					<view class="icon-area loop" @tap="change_play_mode">
						<wyy-icon v-if="play_mode == 'random'" type="&#xe676;" size="40" color="#FFFFFF" ></wyy-icon>
						<wyy-icon v-if="play_mode == 'sequence'" type="&#xe674;" size="40" color="#FFFFFF" ></wyy-icon>
						<wyy-icon v-if="play_mode == 'single'" type="&#xe678;" size="40" color="#FFFFFF" ></wyy-icon>
					</view>
					<view class="icon-area prev" @tap="prev()">
						<wyy-icon type="&#xe66f;" size="40" color="#FFFFFF" ></wyy-icon>
					</view>
					
					<view class="icon-area turn" @tap="turn()">
						<wyy-icon :type="playing ? '&#xe672;' : '&#xe673;'" size="100" color="#FFFFFF" ></wyy-icon>
					</view>
					<view class="icon-area next" @tap="next()">
						<wyy-icon type="&#xe622;" size="50" color="#FFFFFF" ></wyy-icon>
					</view>
					<view class="icon-area list-menu" @tap="open_playlist">
						<wyy-icon type="&#xe671;" size="40" color="#FFFFFF" ></wyy-icon>
					</view>
					
				</view>
			</view>
		</view>
		<playlist-drawer ref="playlist_drawer"></playlist-drawer>
	</view>
</template>

<script>
	import uniTransition from '@/components/uni-transition/uni-transition.vue'
	import playlistDrawer from '@/components/playlist_drawer.nvue';
	
	import wyyIcon from '../../components/wyy-icon/wyy-icon.nvue';
	
	import $repeater from '@/utils/repeater.js';
	
	const animation = weex.requireModule('animation');
	const dom = weex.requireModule('dom')
	
	export default {
		components: {
			uniTransition,
			playlistDrawer,
			wyyIcon
		},
		data() {
			return {
				statusbar_height: $repeater.config.status_bar_height,
				duration: $repeater.player.get_duration().toFixed(0), //音频总长度单位s
				current_position: $repeater.player.get_position().toFixed(0), //当前播放位置
				
				timer: '', //计时器
				animation_timer: '',
				deg: 0,
				dragging: false, //
				show_lyric: false, //是否显示歌词
				nolyric: false,
				lyric: [],
				active_lyric_row_index: 0,
				
				mode_class: ['fade'],
				transfrom_class: {
					'position': 'fixed',
					'bottom': '200rpx',
					'top': 0,
					'left': 0,
					'right': 0,
					'align-items': 'center'
				},
				
			};
		},
		computed: {
			position_show() {
				let minute = parseInt(this.current_position / 60);
				let second = this.current_position % 60;
				if (minute < 10) {
					minute = '0' + minute;
				}
				if (second < 10) {
					second = '0' + second;
				}
				return minute + ':' + second;
			},
			duration_show() {
				let minute = parseInt(this.duration / 60);
				let second = this.duration % 60;
				if (minute < 10) {
					minute = '0' + minute;
				}
				if (second < 10) {
					second = '0' + second;
				}
				return minute + ':' + second;
			},
			playing() {
				return this.$store.state.playing;
			},
			played() {
				return this.$store.state.played;
			},
			islike() {
				return this.$store.state.likelist.includes(this.played.id);
			},
			play_mode() {
				return this.$store.state.play_mode;
			}
		},
		watch: {
			played(value) {
				console.log(value);
				this._init();
			}
		},
		created() {
			
		},
		onReady() {
			this._init();
		},
		methods: {
			_init() {
				this.set_title(this.played.name);
				this.get_lyric();
				this.init_cover_rotate();
				this.init_timer();
				this.init_slider()
			},
			init_slider() {
				setTimeout(()=> {
					this.duration = $repeater.player.get_duration().toFixed(0);
					this.current_position =  $repeater.player.get_position().toFixed(0);
				}, 1000);
			},
			open_playlist() {
				this.$refs.playlist_drawer.open_playlist();
			},
			change_play_mode() {
				let mode_list = ['single', 'sequence', 'random'];
				let current_mode = this.play_mode;
				let index = mode_list.indexOf(current_mode);
				let next_index = index + 1 > 2 ? 0 : index + 1;
				let next_mode = mode_list[next_index];
				this.$store.commit('set_play_mode', next_mode);
			},
			like(event) {
				event.stopPropagation();
				console.log(this.played.id);
				
				$repeater.user.like(this.played.id, !this.islike, (res)=> {
					console.log(res);
					let playlist = this.$store.state.likelist;
					if (this.islike) {
						let index = playlist.indexOf(this.played.id);
						playlist.splice(index, 1);
						console.log(index);
					}else {
						playlist.push(this.played.id);
					}
					console.log(playlist);
					this.$store.commit('set_likelist', playlist);
				})
				
			},
			set_active_lyric_row_index() {
				if (this.nolyric) {
					return;
				}
				var active_lyric_rows = this.lyric.filter((obj)=> {
				    return parseInt(obj.second) <= parseInt(this.current_position) && obj.content;
				});
				
				let current_row = active_lyric_rows.pop();
				
				if (this.active_lyric_row_index == current_row.index) { //在一行歌词停留时, 就不滚动了
					return;
				}
				
				
				this.active_lyric_row_index = current_row.index;
				
				let to_index = 0;
				if (active_lyric_rows.length > 8) {
					to_index = active_lyric_rows.slice(-8)[0].index;
					
					console.log(active_lyric_rows.slice(-8)[0]);
				}
				
				if (current_row.content && to_index > 0) {
					try{
						const el = this.$refs[`lyric${to_index}`][0];
						dom.scrollToElement(el, {})
					}catch(e){
						console.log(e);
					}
				}
				
			},
			get_lyric() {
				$repeater.song.get_lyric(this.played.id, (data)=> {
					
					if (data.nolyric || !data.lrc.lyric) {
						console.log('暂无歌词');
						this.nolyric = true;
						return;
					}
					let lyric = data.lrc.lyric;
					
					let lines = lyric.split('\n');
					
					let new_lyric = [];
					lines.forEach((line, index)=> {
						let new_line = {};
						if (!line) {
							return
						}
						//哈哈哈,正则没写明白
						
						let pattern =/\[\S*\]/g;
						let time = line.match(pattern)[0];
						let line_lyric = line.replace(time, '');
						
						time = time.replace(/\[/, '');
						time = time.replace(/\]/, '');
						
						new_line.index = index;
						new_line.time = time;
						new_line.content = line_lyric.trim();
						new_line.second = (time.split(":")[0] * 60 + parseFloat(time.split(":")[1])).toFixed(0);
						new_lyric.push(new_line);
					})
					
					this.lyric = new_lyric;
					console.log(this.lyric[0]);
				});
			},
			change_container() {
				this.show_lyric = !this.show_lyric;
			},
			init_cover_rotate() {
				if (this.animation_timer) {
					clearInterval(this.animation_timer);
					this.animation_timer = '';
				}
				let cover_image = this.$refs.cover_image;
				
				
				let degree = this.deg + 'deg';
				
				this.animation_timer = setInterval(()=> {
					if (this.playing) {
						this.deg += 20; //步进值
					}
					
					degree = this.deg + 'deg';
					animation.transition(cover_image, {
						styles: {
							transform: 'rotate('+degree+')',
							transformOrigin: 'center center'
						},
						duration: 1400, //ms
						timingFunction: 'linear',
						delay: 0 //ms
					},  ()=> {
						
						
					})
				}, 1400);
				
			},
			set_title(title) {
				uni.setNavigationBarTitle({
					title: title
				});
			},
			slider_changing(e) {
				this.dragging = true;
				this.current_position = e.detail.value;
			},
			slider_change(e) {
				console.log(e);
				let position = e.detail.value;
				$repeater.player.seek_to(position);
				this.dragging = false;
			},
			turn() {
				//切换播放暂停状态
				$repeater.player.turn();
			},
			stop_rotate() {
				
			},
			init_timer() {
				
				
				
				if (this.timer) {
					clearInterval(this.timer);
					this.timer = '';
				}
				this.timer = setInterval(()=> {
					// console.log(this.lyric[this.active_row_lyric][2]);
					if (!this.dragging) {
						this.current_position = $repeater.player.get_position().toFixed(0);
						
						if (this.show_lyric) {
							this.set_active_lyric_row_index();
						}
						
					}
				}, 1000);
			},
			next() {
				console.log('下一曲');
				this.$refs.playlist_drawer.next_song();
			},
			prev() {
				console.log('上一曲');
				this.$refs.playlist_drawer.prev_song();
			},
			download() {
				
			}
		},
	}
</script>

<style>

	.page {
		flex: 1;
		background-color: #171616;
	}
	.header {
		
	}
	.container {
		flex: 1;
	}
	.cover {
		flex: 1;
		justify-content: center;
		align-items: center;
	}
	.cover-image {
		width: 480rpx;
		height: 480rpx;
		border-radius: 1000;
	}
	.footer {
		position: fixed;
		bottom: 0;
		left: 0;
		height: 200rpx;
		width: 750rpx;
		
		
		align-items: center;
		
	}
	
	.slider-view {
		width: 750rpx;
		height: 50rpx;
		flex-direction: row;
		
		justify-content: center;
		align-items: center;
	}
	.slider {
		width: 630rpx;
		margin-left: 10rpx;
		
	}
	.current_time {
		width: 55rpx;
		
		align-items: flex-end;
	}
	.end_time {
		width: 55rpx;
		
	}
	.time-text {
		color: #FFFFFF;
		font-size: 16rpx;
	}
	.grey-time-text {
		color: rgba(255,255,255,.3);
	}
	.option-area {
		width: 750rpx;
		
		align-items: center;
		padding: 20rpx 30rpx 10rpx 30rpx;
	}
	.handle-area {
		width: 750rpx;
		
		align-items: center;
		padding: 20rpx 30rpx 30rpx 30rpx;
	}
	.icon-group {
		width: 600rpx;
		height: 90rpx;
		flex-direction: row;
		align-items: center;
		justify-content: space-between;
	}
	.icon-area {
		width: 120rpx;
		height: 90rpx;
		justify-content: center;
		align-items: center;
	}
	
	.lyric-row {
		width: 750rpx;
		height: 65rpx;
		padding-left: 16rpx;
		justify-content: center;
		align-items: center;
	}
	.lyric-row-text{
		font-size: 24rpx;
		color: #8B8682;
	}
	.light-text {
		color: #FFFFFF;
		font-size: 26rpx;
		font-weight: bold;
	}
	.lyric-list {
		flex: 1;
		width: 750rpx;
	}
	.top-area {
		height: 50rpx;
		width: 750rpx;
	}
	.bottom-area {
		height: 600rpx;
		width: 750rpx;
	}
</style>