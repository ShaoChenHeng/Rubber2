<template>
	<view class="music" >
		<view class="wraper" @tap="play">
		<view class="music-top" >
			<image class="cover-image" :src="song.picUrl + '?param=230y230'"></image>
		</view>
		
		<view class="music-bottom">
			<text class="music-name">{{song.name}}</text>
			<text class="music-creator-name" v-for="(creator, c_index) in song.artists" :key="c_index">{{creator.name + ' '}}</text>
			<!-- <text class="number">{{playlist.trackCount}}首 by {{playlist.creator.nickname}}</text> -->
		</view>
		</view>
		<view class="handle-area" v-if="false">
			
		</view>
	</view>
</template>

<script>
	import $repeater from '@/utils/repeater.js';
	export default {
		name:'song_card_column',
		props: {
			song: {
				type: Object,
				default: {
					
				}
			},
			number: {
				type: Number,
				default: 0
			},
			show_number: {
				type: Boolean,
				default: false,
			},
			playlist_id: {
				type: Number,
				default: 0
			}
		},
		data() {
			return {
				
			};
		},
		computed: {
			played: function() {
				return this.$store.state.played;
			}, 
			play_mode() {
				return this.$store.state.play_mode;
			}
		},
		methods: {

			// 播放
			// 如果选中歌曲和底部播放组件是同一首歌, 则跳转到播放页并开始播放
			// 如果不同, 则开始播放新选中的歌曲, 更新播放组件信息, 不跳转
			play() {
				let song_id = this.song.id;
				$repeater.player.start(song_id, (played)=> {
					played && this.$store.commit('set_played', played);
				})
				
				// 获取相同歌单下的歌曲生成一个播放列表, 如何没有指定歌单id, 那么仅将此首歌push到播放列表中
				if (this.playlist_id) {
					let playlist_id = this.playlist_id;
					$repeater.playlist.get_playlist_detail(playlist_id, (data)=> {
						let playlist = data.playlist;
						let format_songs = [];
						playlist.tracks.forEach((song)=> {
							let format_song = {};
							format_song.id = song.id;
							format_song.name = song.name;
							format_song.artists = song.ar;
							format_song.album_name = song.al.name;
							format_songs.push(format_song);
						})
						this.$store.commit('set_current_playlist', format_songs);
					});
				}else {
					// 不存在playlist_id, 则直接将此歌曲插入到播放列表中
					let song = this.song;
					let format_song = {};
					format_song.id = song.id;
					format_song.name = song.name;
					format_song.artists = song.artists;
					format_song.album_name = song.album_name;
					this.$store.commit('push_current_playlist', format_song);
				}
				
			},
		},
	}
</script>

<style>	
	.music{
		flex-direction: column;	
		align-items: center;
		/* justify-content: space-between; */
		height: 350rpx;
		width: 250rpx;
		margin-top: 30rpx;
		padding-left: 25rpx;		
	}
	
	.wraper {
		height: 350rpx;
		width: 230rpx;
	}
	.cover-image{
		height: 230rpx;
		width: 230rpx;
		border-radius: 5;
	}
	
	.music-top {
		height: 230rpx;
		width: 230rpx;
		margin-bottom: 15rpx;
	}
	

	.music-bottom {
		flex-direction: column;
		justify-content: space-between;
		padding-top: 15rpx;
		width: 230rpx;
	}

	
	.music-name {
		text-align:center;
		font-size: 25rpx;
		font-weight: bold;
		color: #FFFFFF;
		padding-bottom: 10rpx;
		text-overflow: ellipsis;
		lines: 1;
		width: 230rpx;
	}
	
	.music-creator-name {
		text-overflow: ellipsis;
		lines: 1;
		width: 230rpx;
		text-align:center;
		font-size: 22rpx;
		color: rgba(255, 255, 255, .6);
		padding-bottom: 15rpx;
	}

	.wraper:active{
		opacity: 0.8;
	}

</style>
