<template>
	<uni-pop-up ref="showpopup" type="bottom" @change="change">
		<view class="content">
			<view class="header" style="">
				<view class="play-type" @tap="change_play_mode">
					<view class="icon-area" >
						<wyy-icon v-if="play_mode == 'random'" type="&#xe676;" size="35" color="#f0686f"></wyy-icon>
						<wyy-icon v-if="play_mode == 'sequence'" type="&#xe674;" size="35" color="#f0686f"></wyy-icon>
						<wyy-icon v-if="play_mode == 'single'" type="&#xe678;" size="35" color="#f0686f"></wyy-icon>
					</view>
					<view>
						<text class="header-text" v-if="play_mode == 'random'">随机播放</text>
						<text class="header-text" v-else-if="play_mode == 'sequence'">列表循环</text>
						<text class="header-text" v-else-if="play_mode == 'single'" >单曲循环</text>
					</view>
					
				</view>

			</view>
			<list style="flex: 1;" show-scrollbar="false">
				<cell class="song-cell" v-for="(song, index) in playlist" :key="index" @tap="play(song.id)" :ref="`song${song.id}`">
					<view style="flex-direction: row;"  >
						<wyy-icon  v-if="song.id == played.id" type="&#xe67f;" size="35" color="#f0686f" ></wyy-icon>
						<view>
							<text :class="song.id == played.id ? 'active-song-name' : 'song-name'" >{{song.name}}</text>
						</view>
						<view>
							<text :class="song.id == played.id ? 'active-song-singer' : 'song-singer'">{{' - ' + song.artists[0].name}}</text>
						</view>
					</view>
					
					<wyy-icon type="&#xe636;" size="30" color="rgba(255, 255, 255, .6)" ></wyy-icon>
				</cell>
			</list>
		</view>
	</uni-pop-up>
</template>

<script>
	import uniPopUp from '@/components/uni-popup/uni-popup.vue';
	import wyyIcon from '@/components/wyy-icon/wyy-icon.nvue';
	
	import $repeater from '@/utils/repeater.js';
	const dom = weex.requireModule('dom')
	export default {
		components: {
			uniPopUp,
			wyyIcon
		},
		data() {
			return {
				
			};
		},
		props: {
			
		},
		computed: {
			playlist() {
				return this.$store.state.current_playlist;
			},
			played: function() {
				return this.$store.state.played;
			},
			play_mode() {
				return this.$store.state.play_mode;
			}
		},
		created() {
			
		},
		methods: {
			prev_song() {
				$repeater.player.prev((played)=> {
					played && this.$store.commit('set_played', played);
				})
			},
			next_song() {
				$repeater.player.next((played)=> {
					played && this.$store.commit('set_played', played);
				})
			},
			play(song_id) {
				$repeater.player.start(song_id, (played)=> {
					played && this.$store.commit('set_played', played);
					this.close_playlist();
				})
			},
			change(e) {
				// 这里暂时会报一个错误, 因为当前播放的歌曲, 不在播放列表中, 这个问题在将歌曲添加到列表中后会自动解决, 暂时不影响使用
				if (e.show) {
					setTimeout(()=> {
						let song_id = this.played.id;
						const el = this.$refs[`song${song_id}`][0];
						dom.scrollToElement(el, {
							offset: 0,
							animated: false
						})
					}, 300);
				}
			},
			
			close_playlist() {
				this.$nextTick(() => {
					this.$refs.showpopup.close();
				})
			},
			open_playlist() {
				this.$nextTick(() => {
					this.$refs.showpopup.open();
				})
			},
			change_play_mode() {
				let mode_list = ['single', 'sequence', 'random'];
				let current_mode = this.play_mode;
				let index = mode_list.indexOf(current_mode);
				let next_index = index + 1 > 2 ? 0 : index + 1;
				let next_mode = mode_list[next_index];
				this.$store.commit('set_play_mode', next_mode);
			},
		},
	}
	//linear-gradient(to bottom right, rgba(255,255,255,0.6), rgba(0, 0, 0, 1);
</script>

<style>
	.content {
		height: 850rpx; 
		width: 750rpx; 
		
		border-top-left-radius: 35rpx;
		border-top-right-radius: 35rpx;
		background-image: linear-gradient(to bottom, rgba(47, 47, 47, 0.7), rgba(0, 0, 0, 1));
	}
	.header {
		flex-direction: row;
		height: 80rpx;
		
		border-bottom-color: rgba(0, 0, 0, .1);
		border-bottom-width: 1rpx;
	}
	.header-text {
		color: #f0686f;
		font-size: 30rpx;
		font-weight:bold;
		margin-left: 15rpx;
	}
	.play-type {
		flex-direction: row;
		height: 90rpx;
		align-items: center;
		padding: 0 20rpx;
	}
	.play-type:active {
		background-color: rgba(0,0,0,0.2);
	}
	.song-cell {
		padding: 0 20rpx; 
		height: 80rpx;
		flex-direction: row;
		align-items: center;
		justify-content: space-between;
	}
	.song-cell:active {
		background-color: rgba(0,0,0,.1);
	}
	
	.active-song-name {
		color: #f0686f;
		font-size: 30rpx;
		font-weight:bold;
		margin-left: 15rpx;
	}
	.active-song-singer {
		color: #f0686f;
		font-size: 29rpx;
		
	}
	.song-name {
		color: #FFFFFF;
		font-size: 25rpx;
		margin-left: 15rpx;
		font-weight: bold;
	}
	.song-singer {
		color: rgba(255, 255, 255, .6);
		font-size: 25rpx;
	}
	
</style>
